{"version":3,"sources":["webpack:///./docz/examples/15-example-editable.mdx","webpack:///./docz/utils/Playground.jsx"],"names":["MDXContent","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","layout","_this$props","components","_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0___default","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","_utils_Playground__WEBPACK_IMPORTED_MODULE_8__","__codesandbox","__position","__code","__scope","Playground","MaterialTable","_src_material_table__WEBPACK_IMPORTED_MODULE_9__","columns","title","field","type","lookup","34","63","data","surname","birthYear","birthCity","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","onRowUpdate","oldData","onRowDelete","readonly","React","Component","docz__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","codemirror__WEBPACK_IMPORTED_MODULE_1__","n","CodeMirror","defaults","viewportMargin","Infinity"],"mappings":"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","file":"static/js/docz-examples-15-example-editable.7eb730be.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import Playground from '../utils/Playground'\nimport MaterialTable from '../../src/material-table'\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"editable-examples\"}}>{`Editable Examples`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"editable-example\"}}>{`Editable Example`}</MDXTag>\n<Playground __codesandbox={`undefined`} __position={0} __code={'<MaterialTable\\n  columns={[\\n    { title: \\'Name\\', field: \\'name\\' },\\n    { title: \\'Surname\\', field: \\'surname\\' },\\n    { title: \\'Birth Year\\', field: \\'birthYear\\', type: \\'numeric\\' },\\n    {\\n      title: \\'Birth Place\\',\\n      field: \\'birthCity\\',\\n      lookup: { 34: \\'İstanbul\\', 63: \\'Şanlıurfa\\' },\\n    },\\n  ]}\\n  data={[\\n    { name: \\'Mehmet\\', surname: \\'Baran\\', birthYear: 1987, birthCity: 63 },\\n    { name: \\'Zerya Betül\\', surname: \\'Baran\\', birthYear: 2017, birthCity: 34 },\\n  ]}\\n  editable={{\\n    onRowAdd: newData =>\\n      new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          {\\n            /* const data = this.state.data;\\n        data.push(newData);\\n        this.setState({ data }, () => resolve()); */\\n          }\\n          resolve()\\n        }, 1000)\\n      }),\\n    onRowUpdate: (newData, oldData) =>\\n      new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          {\\n            /* const data = this.state.data;\\n    const index = data.indexOf(oldData);\\n    data[index] = newData;                \\n    this.setState({ data }, () => resolve()); */\\n          }\\n          resolve()\\n        }, 1000)\\n      }),\\n    onRowDelete: oldData =>\\n      new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          {\\n            /* let data = this.state.data;\\n    const index = data.indexOf(oldData);\\n    data.splice(index, 1);\\n    this.setState({ data }, () => resolve()); */\\n          }\\n          resolve()\\n        }, 1000)\\n      }),\\n  }}\\n/>'} __scope={{props: this ? this.props : props,Playground,MaterialTable}}>\n  <MaterialTable\n    columns={[\n      {title: 'Name', field: 'name'},\n      {title: 'Surname', field: 'surname'},\n      {title: 'Birth Year', field: 'birthYear', type: 'numeric'},\n      {title: 'Birth Place', field: 'birthCity', lookup: {34: 'İstanbul', 63: 'Şanlıurfa'}},      \n    ]}\n    data={[\n      {name: 'Mehmet', surname: 'Baran', birthYear: 1987, birthCity: 63},\n      {name: 'Zerya Betül', surname: 'Baran', birthYear: 2017, birthCity: 34},\n    ]}\n    editable={{\n      onRowAdd: (newData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          {/* const data = this.state.data;\n          data.push(newData);\n          this.setState({ data }, () => resolve()); */}\n      resolve();\n    }, 1000);\n  }),\n  onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n    setTimeout(() => {\n      {/* const data = this.state.data;\n      const index = data.indexOf(oldData);\n      data[index] = newData;                \n      this.setState({ data }, () => resolve()); */}\n      resolve();\n    }, 1000);\n  }),\n  onRowDelete: (oldData) => new Promise((resolve, reject) => {\n    setTimeout(() => {\n      {/* let data = this.state.data;\n      const index = data.indexOf(oldData);\n      data.splice(index, 1);\n      this.setState({ data }, () => resolve()); */}\n      resolve();\n    }, 1000);\n  }),\n}}\n  />\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"readonly-columns-example\"}}>{`Readonly Columns Example`}</MDXTag>\n<Playground __codesandbox={`undefined`} __position={1} __code={'<MaterialTable\\n  columns={[\\n    { title: \\'Name\\', field: \\'name\\' },\\n    { title: \\'Surname\\', field: \\'surname\\', readonly: true },\\n    { title: \\'Birth Year\\', field: \\'birthYear\\', type: \\'numeric\\' },\\n    {\\n      title: \\'Birth Place\\',\\n      field: \\'birthCity\\',\\n      lookup: { 34: \\'İstanbul\\', 63: \\'Şanlıurfa\\' },\\n    },\\n  ]}\\n  data={[\\n    { name: \\'Mehmet\\', surname: \\'Baran\\', birthYear: 1987, birthCity: 63 },\\n    { name: \\'Zerya Betül\\', surname: \\'Baran\\', birthYear: 2017, birthCity: 34 },\\n  ]}\\n  editable={{\\n    onRowAdd: newData =>\\n      new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          {\\n            /* const data = this.state.data;\\n        data.push(newData);\\n        this.setState({ data }, () => resolve()); */\\n          }\\n          resolve()\\n        }, 1000)\\n      }),\\n    onRowUpdate: (newData, oldData) =>\\n      new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          {\\n            /* const data = this.state.data;\\n    const index = data.indexOf(oldData);\\n    data[index] = newData;                \\n    this.setState({ data }, () => resolve()); */\\n          }\\n          resolve()\\n        }, 1000)\\n      }),\\n    onRowDelete: oldData =>\\n      new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          {\\n            /* let data = this.state.data;\\n    const index = data.indexOf(oldData);\\n    data.splice(index, 1);\\n    this.setState({ data }, () => resolve()); */\\n          }\\n          resolve()\\n        }, 1000)\\n      }),\\n  }}\\n/>'} __scope={{props: this ? this.props : props,Playground,MaterialTable}}>\n  <MaterialTable\n    columns={[\n      {title: 'Name', field: 'name'},\n      {title: 'Surname', field: 'surname', readonly: true},\n      {title: 'Birth Year', field: 'birthYear', type: 'numeric'},\n      {title: 'Birth Place', field: 'birthCity', lookup: {34: 'İstanbul', 63: 'Şanlıurfa'}},      \n    ]}\n    data={[\n      {name: 'Mehmet', surname: 'Baran', birthYear: 1987, birthCity: 63},\n      {name: 'Zerya Betül', surname: 'Baran', birthYear: 2017, birthCity: 34},\n    ]}\n    editable={{\n      onRowAdd: (newData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          {/* const data = this.state.data;\n          data.push(newData);\n          this.setState({ data }, () => resolve()); */}\n      resolve();\n    }, 1000);\n  }),\n  onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n    setTimeout(() => {\n      {/* const data = this.state.data;\n      const index = data.indexOf(oldData);\n      data[index] = newData;                \n      this.setState({ data }, () => resolve()); */}\n      resolve();\n    }, 1000);\n  }),\n  onRowDelete: (oldData) => new Promise((resolve, reject) => {\n    setTimeout(() => {\n      {/* let data = this.state.data;\n      const index = data.indexOf(oldData);\n      data.splice(index, 1);\n      this.setState({ data }, () => resolve()); */}\n      resolve();\n    }, 1000);\n  }),\n}}\n  />\n</Playground>\n           </MDXTag>\n  }\n}\n  ","import {Playground} from 'docz';\r\nimport CodeMirror from 'codemirror';\r\n\r\nCodeMirror.defaults.viewportMargin = Infinity;\r\n\r\nexport default Playground;"],"sourceRoot":""}